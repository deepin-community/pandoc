Description: more fixes to git commit 5e381e3
 These changes recognize that parseURI does not unescape the path.
 .
 Another change is that the canonical form
 of the path used as the MediaBag key
 retains percent-encoding, if present;
 we only unescape the string when writing to a file.
 .
 Some tests are needed before the issue can be closed.
Origin: upstream, https://github.com/jgm/pandoc/commit/df4f13b
Author: John MacFarlane <jgm@berkeley.edu>
Bug: https://github.com/jgm/pandoc/issues/8918
Bug: https://github.com/jgm/pandoc/security/advisories/GHSA-xj5q-fv23-575g
Bug-Debian: https://security-tracker.debian.org/tracker/CVE-2023-35936
Forwarded: yes
Last-Update: 2023-07-25
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
--- a/src/Text/Pandoc/Class/IO.hs
+++ b/src/Text/Pandoc/Class/IO.hs
@@ -49,7 +49,7 @@
 import Network.HTTP.Client.TLS (mkManagerSettings)
 import Network.HTTP.Types.Header ( hContentType )
 import Network.Socket (withSocketsDo)
-import Network.URI (URI(..), parseURI)
+import Network.URI (URI(..), parseURI, unEscapeString)
 import System.Directory (createDirectoryIfMissing)
 import System.Environment (getEnv)
 import System.FilePath ((</>), takeDirectory, normalise)
@@ -122,7 +122,7 @@
 openURL u
  | Just (URI{ uriScheme = "data:",
               uriPath = upath }) <- parseURI (T.unpack u) = do
-     let (mime, rest) = break (== ',') upath
+     let (mime, rest) = break (== ',') $ unEscapeString upath
      let contents = UTF8.fromString $ drop 1 rest
      return (decodeLenient contents, Just (T.pack mime))
  | otherwise = do
@@ -222,7 +222,7 @@
            -> m ()
 writeMedia dir (fp, _mt, bs) = do
   -- we normalize to get proper path separators for the platform
-  let fullpath = normalise $ dir </> fp
+  let fullpath = normalise $ dir </> unEscapeString fp
   liftIOError (createDirectoryIfMissing True) (takeDirectory fullpath)
   logIOError $ BL.writeFile fullpath bs
 
--- a/src/Text/Pandoc/MediaBag.hs
+++ b/src/Text/Pandoc/MediaBag.hs
@@ -35,6 +35,7 @@
 import qualified Data.Text as T
 import Data.Digest.Pure.SHA (sha1, showDigest)
 import Network.URI (URI (..), parseURI, isURI)
+import Data.List (isInfixOf)
 
 data MediaItem =
   MediaItem
@@ -54,11 +55,11 @@
   show bag = "MediaBag " ++ show (mediaDirectory bag)
 
 -- | We represent paths with /, in normalized form.  Percent-encoding
--- is resolved.
+-- is not resolved.
 canonicalize :: FilePath -> Text
 canonicalize fp
   | isURI fp = T.pack fp
-  | otherwise = T.replace "\\" "/" . T.pack . normalise . unEscapeString $ fp
+  | otherwise = T.replace "\\" "/" . T.pack . normalise $ fp
 
 -- | Delete a media item from a 'MediaBag', or do nothing if no item corresponds
 -- to the given path.
@@ -81,11 +82,11 @@
                              , mediaContents = contents
                              , mediaMimeType = mt }
         fp' = canonicalize fp
-        fp'' = T.unpack fp'
+        fp'' = unEscapeString $ T.unpack fp'
         uri = parseURI fp
         newpath = if isRelative fp''
                        && isNothing uri
-                       && not (".." `T.isInfixOf` fp')
+                       && not (".." `isInfixOf` fp'')
                      then fp''
                      else showDigest (sha1 contents) <> "." <> ext
         fallback = case takeExtension fp'' of
